package routes/chainedEvents
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils
  use utils/auth

def createOne( chainedEvent: v2/Object! ): Any* = data/w: {
  fix user = auth/currentUser

  if( not user ){
    jetx/out: json"{
      "error": {
        "message": "Unauthorized"
      }
    }"

    return ()
  }

  fix id = model/saveChainedEvent( chainedEvent, user.id dyn #Int! )

  jetx/out: json"{
    "payload": #{id}
  }"
}

def getByOwnerUserId: Any* = data/w: jetx/out: {
  fix user = auth/currentUser

  if( not user ){
    jetx/out: json"{
      "error": {
        "message": "Unauthorized"
      }
    }"

    return ()
  }

  json"{
    "payload": [#{model/getChainedEventsByOwnerId( user.id dyn #Int! ).*utils/chainedEventsToJson}]
  }"
}

def home = {
  in/method.{
    case 'POST => createOne( in/bodyText.json/parseObject )
    case 'GET => getByOwnerUserId
  }
}

package routes/chainedEvents/current
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils/auth

def updateOne( id: Int!, chainedEvent: v2/Object! ): Any* = data/w: {
  fix user = auth/currentUser

  if( not user ){
    jetx/out: json"{
      "error": {
        "message": "Unauthorized"
      }
    }"

    return ()
  }

  fix isOwner = model/isOwnerChainedEvent( id, user.id dyn #Int! )

  if( not isOwner ){
    jetx/out: json"{
      "error": {
        "message": "Access denied"
      }
    }"

    return ()
  }

  model/updateChainedEvent( id, chainedEvent )

  jetx/out: json"{
    "payload": null
  }"
}

def home = {
  in/method.{
    case 'PUT => updateOne( jetx/params.inte( 'id ), in/bodyText.json/parseObject )
  }
}