package routes/chainedEvents
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils

def createOne( chainedEvent: v2/Object! ) = data/w: {
  fix id = model/saveChainedEvent( chainedEvent )

  jetx/out: json"{
    "payload": #{id}
  }"
}

def getAll = data/w: jetx/out: {
  json"{
    "payload": [#{model/getChainedEvents.*utils/chainedEventsToJson}]
  }"
}

def home = {
  in/method.{
    case 'POST => createOne( in/bodyText.json/parseObject )
    case 'GET => getAll
  }
}

package routes/chainedEvents/current
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model

def updateOne( id: Int!, chainedEvent: v2/Object! ) = data/w: {
  model/updateChainedEvent( id, chainedEvent )

  jetx/out: json"{
    "payload": null
  }"
}

def home = {
  in/method.{
    case 'PUT => updateOne( jetx/params.inte( 'id ), in/bodyText.json/parseObject )
  }
}