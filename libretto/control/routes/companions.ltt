package routes/companions
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils
  use utils/auth

def createOne( companion: v2/Object! ): Any* = data/w: {
  if( not auth/isAdmin ){
    jetx/out: json"{
      "error": {
        "message": "Access denied"
      }
    }"

    return ()
  }

  fix id = model/saveCompanion( companion )

  jetx/out: json"{
    "payload": #{id}
  }"
}

def getAll = data/w: jetx/out: {
  json"{
    "payload": [#{model/getCompanions.*utils/companionsToJson}]
  }"
}

def home = {
  in/method.{
    case 'POST => createOne( in/bodyText.json/parseObject )
    case 'GET => getAll
  }
}

package routes/companions/current
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils/auth

def updateOne( id: Int!, companion: v2/Object! ): Any* = data/w: {
  if( not auth/isAdmin ){
    jetx/out: json"{
      "error": {
        "message": "Access denied"
      }
    }"

    return ()
  }

  model/updateCompanion( id, companion )

  jetx/out: json"{
    "payload": null
  }"
}

def home = {
  in/method.{
    case 'PUT => updateOne( jetx/params.inte( 'id ), in/bodyText.json/parseObject )
  }
}