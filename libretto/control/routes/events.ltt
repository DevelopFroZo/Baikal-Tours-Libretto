package routes/events
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use model
  use utils

def createOne( event: v2/Object! ) = data/w: {
  fix id = model/saveEvent( event )

  jetx/out: json"{
    "payload": #{id}
  }"
}

def getAll = data/w: jetx/out: json"{
  "payload": [#{model/getEvents.*utils/eventsToJson}]
}"

def home = {
  in/method.{
    case 'POST => createOne( in/bodyText.json/parseObject )
    case 'GET => getAll
  }
}

package routes/events/current
  use libretto/io
  use libretto/web/in
  use com/teacode/jetx
  use com/teacode/json
  use com/teacode/json/v2
  use com/teacode/data

  use config
  use model
  use utils

def getOne( id: Int! ) = data/w: {
  fix event = model/getEvent( id )
  var payload: v2/Object?

  if( event.keys.*size == 0 ) payload = json"{ "payload": null }"
  else payload = json"{
    "payload": #{event.*utils/eventToJson}
  }"

  jetx/out: payload
}

def updateOne( id: Int!, event: v2/Object! ) = data/w: {
  model/updateEvent( id, event )

  jetx/out: json"{
    "payload": null
  }"
}

def home = {
  fix id = jetx/params.inte( 'id )

  in/method.{
    case 'GET => getOne( id )
    case 'PUT => updateOne( id, in/bodyText.json/parseObject )
  }
}

def image: Any* = data/w: {
  if( not in/method == 'POST ) return ()

  fix id = jetx/params.inte( 'id )
  fix check = model/checkEvent( id )

  if( not check ){
    jetx/out: json"{
      "error": {
        "message": "Invalid event ID",
        "meta": "id"
      }
    }"

    return ()
  }

  fix folderToSave = io/p: config/UPLOAD_DIRECTORY
  fix fields: in/Field* = in/upload: folderToSave
  fix imagePath = fields as field.where( field.name == 'image ).[0].value

  if( not imagePath ){
    jetx/out: json"{
      "error": {
        "message": "Send file in \"image\" field",
        "meta": "image"
      }
    }"

    return ()
  }

  println: imagePath
  model/attachImageToEvent( id, imagePath )

  jetx/out: json"{
    "payload": #{imagePath}
  }"
}